plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id 'net.neoforged.moddev' version '2.0.90'
    id 'maven-publish'
    id 'java-library'
    id 'idea'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

configurations {
    copyMods
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            gameDirectory = file 'build/run'
        }

        server {
            server()
            programArgument("--nogui")
            gameDirectory = file 'build/run_server'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        configureEach {
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name = 'NeoForge'
        url = "https://maven.neoforged.net/releases"
    }

    maven {
        name = 'Modrinth'
        url "https://api.modrinth.com/maven"
    }

    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
        content {
            includeGroup "org.parchmentmc.data"
        }
    }

    maven {
        name = 'GitHub'
        url = 'https://maven.pkg.github.com/ScrollLang/skript-parser'
        credentials {
            username = System.getenv("PACKAGES_USER") ?: project.findProperty("scrollUsername")
            password = System.getenv("PACKAGES_KEY") ?: project.findProperty("scrollPassword")
        }
    }
}

dependencies {
    additionalRuntimeClasspath(jarJar(implementation("org.scrolllang:skript-parser:${project.skript_parser_version}")))
    additionalRuntimeClasspath(jarJar(implementation("org.reflections:reflections:${project.reflections_version}")))
    additionalRuntimeClasspath(jarJar(implementation("org.javassist:javassist:${project.javassist_version}")))

    implementation "net.kyori:adventure-platform-neoforge:${project.adventure_version}"
    implementation "thedarkcolour:kotlinforforge:${project.kotlinforforge_version}"

    copyMods("maven.modrinth:kotlin-for-forge:${project.kotlinforforge_version}")
}

tasks.register('copyMods', Copy) {
    from configurations.copyMods
    into "build/run/mods"
    include "*.jar"
}

tasks.named('runClient') {
    dependsOn 'copyMods'
}

processResources {
    var replaceProperties = [
        kotlinforforge_version_range: kotlinforforge_version_range,
        kotlinforforge_version      : kotlinforforge_version,
        minecraft_version_range     : minecraft_version_range,
        minecraft_version           : minecraft_version,
        neo_version_range           : neo_version_range,
        neo_version                 : neo_version,
        skript_parser_version       : skript_parser_version,
        adventure_version           : adventure_version,
        mod_description             : mod_description,
        mod_authors                 : mod_authors,
        mod_version                 : mod_version,
        mod_license                 : mod_license,
        mod_name                    : mod_name,
        mod_id                      : mod_id
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta', 'languages/**']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
